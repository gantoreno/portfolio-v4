---
import { type CollectionEntry, getCollection } from "astro:content";

import { format } from "date-fns";

import Html from "@/layouts/Html.astro";
import Head from "@/layouts/Head.astro";
import Body from "@/layouts/Body.astro";

import Entry from "@/components/custom/Entry.astro";

import Signature from "@/components/extras/Signature.astro";

import Blockquote from "@/components/structure/Blockquote.astro";
import BulletedList from "@/components/structure/BulletedList.astro";
import NumberedList from "@/components/structure/NumberedList.astro";
import Snippet from "@/components/structure/Snippet.astro";
import SuperIndex from "@/components/structure/SuperIndex.astro";

import PrimaryHeading from "@/components/headings/PrimaryHeading.astro";
import SecondaryHeading from "@/components/headings/SecondaryHeading.astro";

import Figure from "@/components/structure/Figure.astro";
import Paragraph from "@/components/structure/Paragraph.astro";

import Bold from "@/components/typography/Bold.astro";
import Italic from "@/components/typography/Italic.astro";
import Mono from "@/components/typography/Mono.astro";
import Abbreviation from "@/components/typography/Abbreviation.astro";
import ListItem from "@/components/structure/ListItem.astro";
import Underline from "@/components/typography/Underline.astro";

export const prerender = true;

type Post = CollectionEntry<"blog">;

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: {
      post,
      otherPosts: posts
        .filter((p) => p.slug !== post.slug)
        .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
        .slice(0, 3),
    },
  }));
}

const { post, otherPosts } = Astro.props;

const { Content } = await post.render();

const schema = JSON.stringify({
  "@context": "http://schema.org",
  "@type": "Article",
  name: post.data.title,
  author: {
    "@type": "Person",
    name: post.data.author,
  },
  datePublished: post.data.date,
  // @ts-expect-error
  image: Astro.site.origin + post.data.thumbnail,
  url: Astro.url
});
---

<Html>
  <Head
    title={post.data.title}
    description={post.data.description}
    keywords={post.data.tags}
    thumbnail={post.data.thumbnail}
  >
    <meta property="og:type" content="article" />
    <meta name="author" property="article:author" content={post.data.author} />
    <meta
      property="article:published_time"
      content={post.data.date.toISOString()}
    />
    <script type="application/ld+json" set:html={schema}>
    </script>
  </Head>
  <Body>
    <article id="article">
      <PrimaryHeading class="mt-[60px]" style="--stagger: 1">
        {post.data.title}
      </PrimaryHeading>
      <Paragraph class="!text-disabled mb-[60px]" style="--stagger: 2">
        {format(post.data.date, "MMM d, yyyy")}
      </Paragraph>
      <div id="blur-container" class="[&>p:nth-of-type(1)::first-letter]:font-serif [&>p:nth-of-type(1)::first-letter]:text-primary ::first-letter]:font-serif">
        <Content
          components={{
            abbr: Abbreviation,
            blockquote: Blockquote,
            code: Mono,
            em: Italic,
            h1: PrimaryHeading,
            h2: SecondaryHeading,
            img: Figure,
            ol: NumberedList,
            li: ListItem,
            p: Paragraph,
            pre: Snippet,
            strong: Bold,
            sup: SuperIndex,
            ul: BulletedList,
            u: Underline
          }}
        />
      </div>
      <SecondaryHeading id="continue-reading">
        Continue reading
      </SecondaryHeading>
      {
        otherPosts.map((post: Post) => (
          <Entry
            title={post.data.title}
            description={post.data.description}
            link={"/blog/" + post.slug}
          />
        ))
      }
      <Signature />
    </article>
  </Body>
</Html>
