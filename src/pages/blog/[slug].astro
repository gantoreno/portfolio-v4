---
import { type CollectionEntry, getCollection } from "astro:content";

import { format } from "date-fns";

import { isNew } from "@/utils/article";

import Html from "@/layouts/Html.astro";
import Head from "@/layouts/Head.astro";
import Body from "@/layouts/Body.astro";

import Entry from "@/components/custom/Entry.astro";

import Signature from "@/components/extras/Signature.astro";

import Blockquote from "@/components/structure/Blockquote.astro";
import BulletedList from "@/components/structure/BulletedList.astro";
import Figure from "@/components/structure/Figure.astro";
import NumberedList from "@/components/structure/NumberedList.astro";
import Paragraph from "@/components/structure/Paragraph.astro";
import Snippet from "@/components/structure/Snippet.astro";
import SuperIndex from "@/components/structure/SuperIndex.astro";

import PrimaryHeading from "@/components/headings/PrimaryHeading.astro";
import SecondaryHeading from "@/components/headings/SecondaryHeading.astro";

import Link from "@/components/navigation/Link.astro";

import Bold from "@/components/typography/Bold.astro";
import Italic from "@/components/typography/Italic.astro";
import Mono from "@/components/typography/Mono.astro";
import Abbreviation from "@/components/typography/Abbreviation.astro";
import ListItem from "@/components/structure/ListItem.astro";
import Underline from "@/components/typography/Underline.astro";
import Avatar from "@/components/extras/Avatar.astro";

export const prerender = true;

type Post = CollectionEntry<"blog">;

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: {
      post,
      otherPosts: posts
        .filter((p) => p.slug !== post.slug)
        .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
        .slice(0, 3),
    },
  }));
}

const { post, otherPosts } = Astro.props;

const { Content, remarkPluginFrontmatter } = await post.render();

const schema = JSON.stringify({
  "@context": "http://schema.org",
  "@type": "Article",
  name: post.data.title,
  author: {
    "@type": "Person",
    name: post.data.author,
  },
  datePublished: post.data.date,
  // @ts-expect-error
  image: Astro.site.origin + post.data.thumbnail,
  url: Astro.url,
});
---

<Html>
  <Head
    title={post.data.title}
    description={post.data.description}
    keywords={post.data.tags}
    thumbnail={post.data.thumbnail}
  >
    <meta property="og:type" content="article" />
    <meta name="author" property="article:author" content={post.data.author} />
    <meta
      property="article:published_time"
      content={post.data.date.toISOString()}
    />
    <script type="application/ld+json" set:html={schema} />
  </Head>
  <Body>
    <article id="article">
      <PrimaryHeading class="mt-[60px]" style="--stagger: 1">
        {post.data.title}
      </PrimaryHeading>
      <Paragraph class="!mt-[20px]" style="--stagger: 2">
        {post.data.description}
      </Paragraph>
      <div
        class="!text-disabled mt-0 mb-[60px] flex align-center gap-[10px]"
        style="--stagger: 3"
        data-blurrable
      >
        <Avatar />
        <div class="inline-flex flex-col">
          <div class="top">
            <Link
              class="decoration-transparent hover:decoration-disabled duration-[0.15s]"
              href="https://x.com/gantoreno"
              target="_blank"
            >
              {post.data.author}
            </Link>
            <span class="mx-[2.5px]">·</span>
            <Link
              class="decoration-transparent hover:decoration-disabled duration-[0.15s]"
              href="https://x.com/intent/follow?screen_name=gantoreno"
              target="_blank"
            >
              Follow
            </Link>
          </div>
          <div class="bottom">
            {remarkPluginFrontmatter.minutesRead}
            <span class="mx-[2.5px]">·</span>
            {format(post.data.date, "MMM d, yyyy")}
          </div>
        </div>
        <a
          class="ml-auto self-center"
          href={"https://x.com/intent/post?text=" +
            encodeURI(post.data.title + " by @gantoreno " + Astro.request.url)}
          target="_blank"
        >
          <svg
            class="stroke-disabled hover:stroke-primary duration-[0.15s]"
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke-width="1"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="icon icon-tabler icons-tabler-outline icon-tabler-share-2"
            ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
              d="M8 9h-1a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-8a2 2 0 0 0 -2 -2h-1"
            ></path><path d="M12 14v-11"></path><path d="M9 6l3 -3l3 3"
            ></path></svg
          >
        </a>
      </div>
      <div
        id="blur-container"
        class="[&>p:nth-of-type(1)::first-letter]:font-serif [&>p:nth-of-type(1)::first-letter]:text-primary ::first-letter]:font-serif"
      >
        <Content
          components={{
            abbr: Abbreviation,
            blockquote: Blockquote,
            code: Mono,
            em: Italic,
            h1: PrimaryHeading,
            h2: SecondaryHeading,
            img: Figure,
            ol: NumberedList,
            li: ListItem,
            p: Paragraph,
            pre: Snippet,
            strong: Bold,
            sup: SuperIndex,
            ul: BulletedList,
            u: Underline,
          }}
        />
      </div>
      <SecondaryHeading id="continue-reading">
        Continue reading
      </SecondaryHeading>
      {
        otherPosts.map((post: Post) => (
          <Entry
            title={post.data.title}
            description={post.data.description}
            link={"/blog/" + post.slug}
            new={isNew(post.data.date)}
          />
        ))
      }
      <Signature />
    </article>
  </Body>
</Html>
